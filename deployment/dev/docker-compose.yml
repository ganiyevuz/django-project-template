services:

  ######################
  # Core Application Services
  ######################

  backend:
    image: backed_image_name:0.0.1
    container_name: dev-backend
    restart: unless-stopped
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - sessions:/app/sessions
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CACHE_BACKEND_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      DOMAIN: ${BACKEND_DOMAIN}
      WEBHOOK_DOMAIN: ${BOT_DOMAIN}
      SESSIONS_DIR: '/app/sessions'
    networks:
      - app-network
      - shared-network
    labels:
      traefik.enable: "true"
      traefik.http.routers.dev-backend.rule: "Host(`${BACKEND_DOMAIN}`)"
      traefik.http.routers.dev-backend.entrypoints: "websecure"
      traefik.http.routers.dev-backend.tls.certresolver: "le"
      traefik.http.services.dev-backend.loadbalancer.server.port: "8000"
      traefik.docker.network: "shared-network"

  bot:
    image: backed_image_name:0.0.1
    container_name: dev-bot
    entrypoint: [ "/aiobot-entrypoint.sh" ]
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CACHE_BACKEND_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      BOT_TOKEN: ${BOT_TOKEN}
      SENTRY_DSN: ${SENTRY_DSN}
      USE_WEBHOOK: ${USE_WEBHOOK}
      WEBHOOK_DOMAIN: ${BOT_DOMAIN}
      ENABLE_METRICS: True
    networks:
      - app-network
      - shared-network
    labels:
      traefik.enable: "true"
      traefik.http.routers.dev-bot.rule: "Host(`${BOT_DOMAIN}`)"
      traefik.http.routers.dev-bot.entrypoints: "websecure"
      traefik.http.routers.dev-bot.tls.certresolver: "le"
      traefik.http.services.dev-bot.loadbalancer.server.port: "8000"
      traefik.docker.network: "shared-network"

  userbot:
    image: userbot_image_name:0.0.1
    container_name: dev-userbot
    restart: unless-stopped
    volumes:
      - sessions:/app/sessions
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      API_ID: ${API_ID}
      API_HASH: ${API_HASH}
      SESSIONS_DIR: '/app/sessions'
      API_SECRET_KEY: ${DJANGO_SECRET_KEY}
      USER_API_BASE_URL: https://${BACKEND_DOMAIN}/api/v1/management/userbots
      CACHE_BACKEND_URL: redis://:${REDIS_PASSWORD}@redis:6379/3
    networks:
      - app-network
      - shared-network
    labels:
      traefik.enable: "true"
      traefik.http.routers.dev-userbot.rule: "Host(`${USERBOT_DOMAIN}`)"
      traefik.http.routers.dev-userbot.entrypoints: "websecure"
      traefik.http.routers.dev-userbot.tls.certresolver: "le"
      traefik.http.services.dev-userbot.loadbalancer.server.port: "8000"
      traefik.docker.network: "shared-network"

  ######################
  # Databases & Queues
  ######################

  db:
    image: postgres:16-alpine
    container_name: dev-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: dev-redis
    restart: unless-stopped
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--requirepass", "${REDIS_PASSWORD}",
      "--maxmemory", "256mb",
      "--maxmemory-policy", "allkeys-lru"
    ]
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  ######################
  # Monitoring Services
  ######################

  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: dev-prometheus
    restart: unless-stopped
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    ports:
      - "9090:9090"
    networks:
      - app-network
      - shared-network
    labels:
      traefik.enable: "true"
      traefik.http.routers.dev-prometheus.rule: "Host(`${PROMETHEUS_DOMAIN}`)"
      traefik.http.routers.dev-prometheus.entrypoints: "websecure"
      traefik.http.routers.dev-prometheus.tls.certresolver: "le"
      traefik.http.services.dev-prometheus.loadbalancer.server.port: "9090"

  grafana:
    image: grafana/grafana:12.0.2-ubuntu
    container_name: dev-grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "true"
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN}
      GF_SERVER_ROOT_URL: https://${GRAFANA_DOMAIN}
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-piechart-panel,grafana-simple-json-datasource"
    networks:
      - app-network
      - shared-network
    labels:
      traefik.enable: "true"
      traefik.http.routers.dev-grafana.rule: "Host(`${GRAFANA_DOMAIN}`)"
      traefik.http.routers.dev-grafana.entrypoints: "websecure"
      traefik.http.routers.dev-grafana.tls.certresolver: "le"
      traefik.http.services.dev-grafana.loadbalancer.server.port: "3000"

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: dev-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}?sslmode=disable"
    networks:
      - app-network

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: dev-redis-exporter
    restart: unless-stopped
    command:
      - '--redis.addr=redis://dev-redis:6379'
      - '--redis.password=${REDIS_PASSWORD}'
    networks:
      - app-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: dev-cadvisor
    restart: unless-stopped
    privileged: true
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-network

  ######################
  # Backup
  ######################

  db_backup:
    image: ganiyevuz/postgres-backup-telegram
    container_name: dev-db-backup
    restart: unless-stopped
    volumes:
      - postgres_backup:/backup
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  static_volume:
    driver: local
    driver_opts:
      type: none
      device: /var/www/dev/static
      o: bind
  media_volume:
    driver: local
    driver_opts:
      type: none
      device: /var/www/dev/media
      o: bind
  sessions:
    driver: local
    driver_opts:
      type: none
      device: /var/www/dev/sessions
      o: bind
  postgres_backup:

networks:
  app-network:
    driver: bridge
  shared-network:
    external: true
    name: shared-network
