name: üöÄ CI/CD Pipeline for Deployment

on:
  workflow_run:
    workflows: [ "shared-services-backend-deploy" ]
    types:
      - completed

env:
  BACKEND_VERSION: v1.2
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  build-images:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: üß± Build & Push Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - backend
          - userbot

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v3

      - name: üîê Setup SSH Access (for .env if needed)
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üîë Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üê≥ Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service == 'backend' && '.' || './userbot' }}
          file: ${{ matrix.service == 'backend' && './deployment/Dockerfile' || './userbot/Dockerfile' }}
          tags: ${{ secrets.DOCKER_USERNAME }}/monitoring-${{ matrix.service }}:${{ env.BACKEND_VERSION }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: üöÄ Deploy to Server
    runs-on: ubuntu-latest
    needs: build-images

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v3

      - name: üõ†Ô∏è Set Project Directory Based on Branch
        id: set_project_dir
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "PROJECT_ROOT=/var/www/dev" >> $GITHUB_ENV
            echo "PROJECT_DIR=/var/www/dev/backend" >> $GITHUB_ENV
            echo "DEPLOY_FOLDER=deployment/dev" >> $GITHUB_ENV
            echo "BACKEND_DOMAIN=${{ secrets.DEV_BACKEND_DOMAIN }}" >> $GITHUB_ENV
          else
            echo "PROJECT_ROOT=/var/www/prod" >> $GITHUB_ENV
            echo "PROJECT_DIR=/var/www/prod/backend" >> $GITHUB_ENV
            echo "DEPLOY_FOLDER=deployment/prod" >> $GITHUB_ENV
            echo "BACKEND_DOMAIN=${{ secrets.BACKEND_DOMAIN }}" >> $GITHUB_ENV
          fi

      - name: üõ†Ô∏è Generate .env for Backend
        run: |
          touch .env
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
          echo "API_ID=${{ secrets.API_ID }}" >> .env
          echo "API_HASH=${{ secrets.API_HASH }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_USER=postgres" >> .env
          echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> .env
          echo "USE_WEBHOOK=${{ secrets.USE_WEBHOOK }}" >> .env
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
          echo "BOT_DOMAIN=${{ secrets.BOT_DOMAIN }}" >> .env
          echo "DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }}" >> .env
          echo "DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }}" >> .env
          echo "DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "BACKEND_VERSION=${{ env.BACKEND_VERSION }}" >> .env
          echo "BACKEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/monitoring-backend:${{ env.BACKEND_VERSION }}" >> .env
          echo "USERBOT_IMAGE=${{ secrets.DOCKER_USERNAME }}/monitoring-userbot:${{ env.BACKEND_VERSION }}" >> .env
          echo "TELEGRAM_CHAT_IDS=${{ secrets.TELEGRAM_CHAT_IDS }}" >> .env
          echo "TELEGRAM_CHAT_ID=6990890693" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "BACKEND_DOMAIN=${{ env.BACKEND_DOMAIN }}" >> .env
          echo "PROMETHEUS_DOMAIN=${{ secrets.PROMETHEUS_DOMAIN }}" >> .env
          echo "GRAFANA_DOMAIN=${{ secrets.GRAFANA_DOMAIN }}" >> .env
          echo "USERBOT_DOMAIN=${{ secrets.USERBOT_DOMAIN }}" >> .env
          echo "USE_S3_STORAGE=${{ secrets.USE_S3_STORAGE }}" >> .env
          echo "AWS_S3_ENDPOINT_URL=${{ secrets.AWS_S3_ENDPOINT_URL }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
          echo "AWS_S3_USE_SSL=${{ secrets.AWS_S3_USE_SSL }}" >> .env

      - name: üîê Setup SSH Access
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üìÅ Create Directories on Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            mkdir -p $PROJECT_ROOT/static
            mkdir -p $PROJECT_ROOT/media
            mkdir -p $PROJECT_ROOT/sessions
            mkdir -p $PROJECT_DIR/grafana/provisioning/dashboards
            mkdir -p $PROJECT_DIR/grafana/dashboards
            mkdir -p $PROJECT_DIR/grafana/provisioning/datasources
            mkdir -p $PROJECT_DIR/prometheus
          "

      - name: üì§ Upload Files to Server
        run: |
          scp -o StrictHostKeyChecking=no -r ${{ env.DEPLOY_FOLDER }}/* .env deployment/deploy.sh deployment/nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$PROJECT_DIR/
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            chmod +x $PROJECT_DIR/deploy.sh
          "

      - name: üöÄ Deploy Backend on Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd $PROJECT_DIR && ./deploy.sh
          "

      - name: üßπ Clean Up Docker Garbage
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            docker image prune -af && docker container prune -f
          "

      - name: ‚úÖ Telegram Notification - Success
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_IDS }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: html
          message: |
            ‚úÖ <b>Deployment Successful</b>
            
            <b>Branch:</b> ${{ github.ref }}
            <b>Commit:</b> ${{ github.sha }}
            <b>Committer:</b> ${{ github.actor }}
            <b>Domain:</b> ${{ env.BACKEND_DOMAIN }}
            <b>Backend Version:</b> <code>${{ env.BACKEND_VERSION }}</code>
            
            üìú <b>Logs:</b> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions Logs</a>
            
            Deployment was successful. All systems are operational.

      - name: ‚ùå Telegram Notification - Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_IDS }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: html
          message: |
            ‚ùå <b>Deployment Failed</b>
            
            <b>Branch:</b> ${{ github.ref }}
            <b>Commit:</b> ${{ github.sha }}
            <b>Committer:</b> ${{ github.actor }}
            <b>Event:</b> ${{ github.event_name }}
            <b>Domain:</b> ${{ env.BACKEND_DOMAIN }}
            <b>Backend Version:</b> <code>${{ env.BACKEND_VERSION }}</code>
            
            üìú <b>Logs:</b> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions Logs</a>
            
            Please investigate the failure and take the necessary action.
